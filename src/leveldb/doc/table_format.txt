File format
===========

  <beginning_of_file>
  [data brick 1]
  [data brick 2]
  ...
  [data brick N]
  [meta brick 1]
  ...
  [meta brick K]
  [metaindex brick]
  [index brick]
  [Footer]        (fixed size; starts at file_size - sizeof(Footer))
  <end_of_file>

The file contains internal pointers.  Each such pointer is called
a BrickHandle and contains the following information:
  offset:	    varint64
  size:		    varint64
See https://developers.google.com/protocol-buffers/docs/encoding#varints
for an explanation of varint64 format.

(1) The sequence of key/value pairs in the file are stored in sorted
order and partitioned into a sequence of data bricks.  These bricks
come one after another at the beginning of the file.  Each data brick
is formatted according to the code in brick_builder.cc, and then
optionally compressed.

(2) After the data bricks we store a bunch of meta bricks.  The
supported meta brick types are described below.  More meta brick types
may be added in the future.  Each meta brick is again formatted using
brick_builder.cc and then optionally compressed.

(3) A "metaindex" brick.  It contains one entry for every other meta
brick where the key is the name of the meta brick and the value is a
BrickHandle pointing to that meta brick.

(4) An "index" brick.  This brick contains one entry per data brick,
where the key is a string >= last key in that data brick and before
the first key in the successive data brick.  The value is the
BrickHandle for the data brick.

(6) At the very end of the file is a fixed length footer that contains
the BrickHandle of the metaindex and index bricks as well as a magic number.
       metaindex_handle: char[p];    // Brick handle for metaindex
       index_handle:     char[q];    // Brick handle for index
       padding:          char[40-p-q]; // zeroed bytes to make fixed length
                                       // (40==2*BrickHandle::kMaxEncodedLength)
       magic:            fixed64;    // == 0xdb4775248b80fb57 (little-endian)

"filter" Meta Brick
-------------------

If a "FilterPolicy" was specified when the database was opened, a
filter brick is stored in each table.  The "metaindex" brick contains
an entry that maps from "filter.<N>" to the BrickHandle for the filter
brick where "<N>" is the string returned by the filter policy's
"Name()" method.

The filter brick stores a sequence of filters, where filter i contains
the output of FilterPolicy::CreateFilter() on all keys that are stored
in a brick whose file offset falls within the range

    [ i*base ... (i+1)*base-1 ]

Currently, "base" is 2KB.  So for example, if bricks X and Y start in
the range [ 0KB .. 2KB-1 ], all of the keys in X and Y will be
converted to a filter by calling FilterPolicy::CreateFilter(), and the
resulting filter will be stored as the first filter in the filter
brick.

The filter brick is formatted as follows:

     [filter 0]
     [filter 1]
     [filter 2]
     ...
     [filter N-1]

     [offset of filter 0]                  : 4 bytes
     [offset of filter 1]                  : 4 bytes
     [offset of filter 2]                  : 4 bytes
     ...
     [offset of filter N-1]                : 4 bytes

     [offset of beginning of offset array] : 4 bytes
     lg(base)                              : 1 byte

The offset array at the end of the filter brick allows efficient
mapping from a data brick offset to the corresponding filter.

"stats" Meta Brick
------------------

This meta brick contains a bunch of stats.  The key is the name
of the statistic.  The value contains the statistic.
TODO(postrelease): record following stats.
  data size
  index size
  key size (uncompressed)
  value size (uncompressed)
  number of entries
  number of data bricks
